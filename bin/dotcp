#!/bin/sh

set -eu

prog=$(basename $0)
simulate=false
verbose=0
deploy_dir=$HOME
usepager=false
src_dr_base=${DOTCP_DOTFILES:-$HOME/dotfiles}
sim_deploy_dir=
templ_render_dir=
reverse_cp_commands=false
keep_sim_deploy_dir=false
only_existing=false
bak_suffix='.bak-dotcp-'
exclude=
include=
run_as_root=false
mtime_mode=s

usage(){
    cat <<EOF
Usage
    $prog [options]

Options
    -h : help
    -s : simulate
    -k : keep simulate files
    -e : treat only files which already exist
    -c : copy target back to \$DOTCP_DOTFILES/{user,root}/path/to/file
    -S : source base dir [default: \$DOTCP_DOTFILES or \$HOME/dotfiles]
    -v : verbose, shows diffs
    -V : more verbose, print all considered file names, also more cp -v
    -p : use pager
    -x : exclude regex
    -i : include regex, use either -i or -x
    -r : run as root (using sudo)
    -m : how to treat modification times in diff: (s)ource is new,
         (t)arget is new, (a)uto = use file mtime
         [default: s]
    -d : config files will be copied to <deploy_dir>/
         [default: \$HOME]
    --sim-deploy-dir : temp dir for -s, default is auto-generated
EOF
}


here=$(dirname $(readlink -f $0))
tools_dir=$here/../tools
. $tools_dir/common.sh

ESH=$tools_dir/submods/esh/esh
BACKUP=$tools_dir/submods/shelltools/bin/backup


# These are defined here even though they are used in functions defined in
# tools/common.sh . The reason is that we need a reliable way to provide the
# path tools_dir which is not possible from within tools/common.sh, since that
# script is just sourced and doesn't know its own location in the source tree,
# AFAWK. If there is a way, PRs welcome! Also yes, don't use shell for more
# than simple scripts. Next time we use Rust, promise!
ft_file=$(filetype $tools_dir/filetypes/dir/file)
ft_link=$(filetype $tools_dir/filetypes/dir/link)
ft_dir=$(filetype $tools_dir/filetypes/dir)


cleanup(){
    if $simulate; then
        if ! $keep_sim_deploy_dir; then
            [ -n "$sim_deploy_dir" -a -d "$sim_deploy_dir" ] \
                && rm -rf $sim_deploy_dir
        fi
    fi

    # Must use if ... fi rather than a command chain [ condition ] && do_stuff
    # such that the exit code of cleanup() is always 0. If cleanup() has exit
    # code != 0, it replaces the exit code of the dotcp script, which will make
    # dotcp appear to have failed.
    if [ -n "$templ_render_dir" -a -d "$templ_render_dir" ]; then
        rm -rf $templ_render_dir
    fi
}


cmdline=$(getopt -o hcsS:kpevVd:x:i:rm: -lsim-deploy-dir: -- "$@")
eval set -- "$cmdline"
while [ $# -gt 0 ]; do
    case "$1" in
        -s)
            simulate=true
            ;;
        --sim-deploy-dir)
            sim_deploy_dir="$(strip_quotes $2)"
            shift
            ;;
        -k)
            keep_sim_deploy_dir=true
            ;;
        -e)
            only_existing=true
            ;;
        -p)
            usepager=true
            ;;
        -S)
            src_dr_base="$(strip_quotes $2)"
            shift
            ;;
        -c)
            reverse_cp_commands=true
            ;;
        -v)
            verbose=1
            ;;
        -V)
            verbose=2
            ;;
        -d)
            deploy_dir="$(strip_quotes $2)"
            shift
            ;;
        -i)
            include="$(strip_quotes $2)"
            shift
            ;;
        -x)
            exclude="$(strip_quotes $2)"
            shift
            ;;
        -r)
            run_as_root=true
            ;;
        -m)
            mtime_mode="$(strip_quotes $2)"
            shift
            ;;
        -h)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            err "cmdline error"
            ;;
    esac
    shift
done


if $run_as_root; then
    # run as root:
    #   dotcp -r -s -i foo -pv
    # gets transformed by getopt to
    #   cmdline="-r -s -i 'foo' -p -v --"
    # We remove "-r" and the final "--" and call us again with sudo. Cool, eh?
    #
    # By default, all string args are single-quoted in that case by getopt.
    # There is an option to turn that off, but that causes other problems, so we
    # keep it. Nevertheless, the quoting causes some problems down the line b/c
    # e.g. args to -i, -x, -d, -S are not recognized. For instance -S sets
    # $src_dr_base. Say we use (as user)
    #   dotcp -S /path/to/foo
    # which will be used as
    #   $src_dr_base/user
    #   /path/to/foo/user
    # whereas as root we'd have
    #   dotcp -r -S /path/to/foo
    # with
    #   $src_dr_base/user
    #   '/path/to/foo'/user
    # which raises an error. That's why we apply strip_quotes to all string
    # args.
    sudo -A --preserve-env=DOTCP_DOTFILES $(readlink -f $0) \
        $(echo "$cmdline" | sed -re 's/(.*) --/\1/; s/-r//')
    exit 0
fi


main(){
    [ -n "$include" -a -n "$exclude" ] && err "use either -i or -x, not both"

    # mv -v, cp -v
    [ $verbose -ge 2 ] && vopt='-v' || vopt=
    cp_opts="--preserve=mode,links,xattr --no-dereference --recursive"

    # the non-root user is the owner of this script
    user=$(stat -c %U $0)
    if [ $(id -u) -eq 0 ]; then
        is_root=true
        [ $verbose -ge 1 ] && echo "note: you are root: setting deploy_dir=/"
        deploy_dir='/'
        who="root"
    else
        who="user"
        is_root=false
    fi

    # $DOTCP_DOTFILES/{user,root}
    src_dr="$src_dr_base/$who"
    exists $src_dr || err "src_dr not found: $src_dr"

    [ $verbose -ge 1 ] && echo "source directory: $src_dr"
    [ $verbose -ge 1 ] && echo "target directory: $deploy_dir"
    isdir "$deploy_dir" || err "dir '$deploy_dir' doesn't exist"

    if $simulate; then
        [ -z "$sim_deploy_dir" ] && sim_deploy_dir=$(tmpdir dotcp_simulate)
        [ $verbose -ge 1 ] && echo "simulate: installing into $sim_deploy_dir"
    fi

    trap cleanup EXIT STOP INT QUIT KILL ABRT TERM HUP

    # $DOTCP_DOTFILES/user/.foo/file ---- src, _src
    # ^^^^^^^^^^^^^^^-------------------- src_dr_base
    # ^^^^^^^^^^^^^^^^^^^^--------------- src_dr, used_src_dr
    #                      ^^^^^^^^^----- install_path
    #
    #
    # /home/user/.foo/file -------------- real_tgt
    # ^^^^^^^^^^------------------------- deploy_dir
    #            ^^^^^^^^^--------------- install_path
    #
    # with templates:
    #
    # $DOTCP_DOTFILES/user/.foo/file.dotcp_esh ----------------- _src
    # ^^^^^^^^^^^^^^^------------------------------------------- src_dr_base
    # ^^^^^^^^^^^^^^^^^^^^-------------------------------------- src_dr
    #
    # /dev/shm/dotcp_templ_render_hsjqwjy717y32u/.foo/file ---- src
    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -------------- used_src_dr
    #                                            ^^^^^^^^^----- install_path
    #
    for _src in $(find $src_dr -type f -o -type l -a ! -name "*.swp"); do

        # render templates
        if echo $_src | grep -qE '\.dotcp_esh$'; then
            # Create templ_render_dir once, but only if we encounter templates
            # at all.
            [ -z "$templ_render_dir" ] && templ_render_dir=$(tmpdir dotcp_templ_render)

            src=$templ_render_dir/$(echo $_src \
                | sed -r -e 's/\.dotcp_esh$//' -e "s|$src_dr/||")
            mkdir -p $(dirname $src)

            $ESH $_src > $src

            # If rendered template is empty, skip ahead.
            [ -z "$(tr -d ' ' < $src)" ] && continue

            # Restore file perms after template render.
            chmod $(stat -c %a $_src) $src

            used_src_dr=$templ_render_dir
            src_from_template=true
        else
            src=$_src
            used_src_dr=$src_dr
            src_from_template=false
        fi

        # render link templates where link target contains special
        # __dotcp_home__ placeholder
        src_from_link_template=false
        if islink $_src; then
            link_tgt=$(readlink $_src)
            if echo $link_tgt | grep -q __dotcp_home__; then
                [ -z "$templ_render_dir" ] && templ_render_dir=$(tmpdir dotcp_templ_render)

                src=$templ_render_dir/$(echo $_src | sed -r -e "s|$src_dr/||")
                mkdir -p $(dirname $src)
                ln -s $(echo $link_tgt | sed -re "s|__dotcp_home__|$HOME|") $src

                used_src_dr=$templ_render_dir
                src_from_link_template=true
            else
                src=$_src
                used_src_dr=$src_dr
            fi
        fi

        install_path=$(echo $src | sed "s|$used_src_dr/||")
        real_tgt=$deploy_dir/$install_path

        # apply include / exclude pattern
        if [ -n "$exclude" ]; then
            if echo "$install_path" | grep -qE "$exclude"; then
                [ $verbose -ge 2 ] && echo "exclude: $install_path"
                continue
            else
                [ $verbose -ge 2 ] && echo "include: $install_path"
            fi
        elif [ -n "$include" ]; then
            if echo "$install_path" | grep -qE "$include"; then
                [ $verbose -ge 2 ] && echo "include: $install_path"
            else
                [ $verbose -ge 2 ] && echo "exclude: $install_path"
                continue
            fi
        else
            [ $verbose -ge 2 ] && echo "include: $install_path"
        fi

        # whether to treat existing targets only
        if $only_existing; then
            exists $real_tgt || continue
        fi

        # check if we need to update target, go on if needed
        tgt=$real_tgt
        if isfile "$src" && isfile "$tgt"; then
            same_hash $src $tgt && continue
        fi
        if islink "$src" && islink "$tgt"; then
            # compare link targets (path names, not content via hash)
            [ "$(readlink $src)" = "$(readlink $tgt)" ] && continue
        fi

        # simulate, determine $sim_tgt
        if $simulate; then
            sim_tgt=$sim_deploy_dir/$install_path
            if exists "$real_tgt"; then
                mkdir -p $(dirname $sim_tgt)
                cp $cp_opts $vopt $real_tgt $sim_tgt
            fi
            tgt=$sim_tgt
        fi

        # Commands for the reverse: tgt (file system) --> src (here)
        if $reverse_cp_commands; then
            $src_from_template && err "-c doesn't work for templates, file: $_src"
            $src_from_link_template && \
                err "-c doesn't work for link templates, file: $_src -> $(readlink $_src)"
            if exists $real_tgt; then
                copy_cmd="cp $cp_opts $real_tgt $src"
                $is_root && copy_cmd="sudo $copy_cmd; sudo chown $user:$user $src"
            else
                copy_cmd="rm -r $src"
            fi
            $simulate && echo "$copy_cmd" || eval "$copy_cmd -v"
        # Copy to target
        else
            echo "#item: $(filetype $src): $real_tgt [$src]"
            if [ $verbose -ge 1 ] && isfile "$src"; then
                if exists $real_tgt; then
                    if [ $mtime_mode = "s" ]; then
                        old=$real_tgt
                        new=$src
                    elif [ $mtime_mode = "t" ]; then
                        old=$src
                        new=$real_tgt
                    elif [ $mtime_mode = "a" ]; then
                        if [ $(get_mtime $src) -le $(get_mtime $real_tgt) ]; then
                            old=$src
                            new=$real_tgt
                        else
                            old=$real_tgt
                            new=$src
                        fi
                    else
                        err "illegal mtime_mode=$mtime_mode"
                    fi
                    # Work around diff exit code. Need to use
                    #   echo $(diff...)
                    # to prevent dropping out here if we use
                    #   set -e
                    # globally.
                    echo "$(diff -Naur $old $new)"
                fi
            fi
            # backup -d : backup and delete, ensure clear dir when
            # copying new file
            # backup -P : copy links as links
            if exists "$tgt"; then
                tgt_perms=$(stat -c %a $tgt)
                tgt_ownership=$(stat -c %U:%G $tgt)
                if ! $simulate; then
                    $BACKUP -dP -p $bak_suffix $tgt
                fi
            else
                tgt_perms=
                tgt_ownership=
            fi
            mkdir -p $vopt $(dirname $tgt)
            cp $cp_opts $vopt $src $tgt

            # Adjust permissions and ownership of target.
            #
            # This is only a partial solution and doesn't work if the target
            # doesn't already exist. A better one would be to do the same as
            # chezmoi does by encoding this in the file name somehow, since
            # unfortunately git can't track file mode and ownership.
            if [ -n "$tgt_perms" ]; then
                # Skip chmod on broken links since that exits != 0 and the
                # script stops here since set -e.
                islink "$tgt" && ! linkok "$tgt" || chmod $tgt_perms $tgt
            fi
            #
            # In user mode we assume that all files in src_dr and deploy_dir
            # are owned by user:user (or whatever the ownership of the files in
            # src_dr is), we just copy stuff. In root mode, there are funky
            # ownerships other than root:root, such as root:mail etc.
            if $is_root && [ -n "$tgt_ownership" ]; then
                islink "$tgt" && ! linkok "$tgt" || chown $tgt_ownership $tgt
            fi
        fi
    done
}


if $usepager; then
    which -s nvim > /dev/null 2>&1 && VIM=nvim || VIM=vim
    main | $VIM -c 'set nomod syn=diff' -c 'map q :q<CR>' -
else
    main
fi
