#!/bin/sh

set -e

prog=$(basename $0)
simulate=false
verbose=0
deploy_dir=$HOME
usepager=false
src_dr_base=${DOTCP_DOTFILES:-$HOME/dotfiles}
sim_deploy_dir=
reverse_cp_commands=false
keep_sim_deploy_dir=false
only_existing=false
bak_suffix='.bak-dotcp-'
exclude=''
include=''


usage(){
    cat <<EOF
$prog <options>

Copy config files and dirs from <src_dr> (default: \$DOTCP_DOTFILES/{user,root})
to <deploy_dir> (default: deploy_dir=\$HOME).

Only individual files are copied, so <src_dr>/.ssh/config will only
overwrite ~/.ssh/config and not any other file (like ssh keys) in there.

Depending on who runs this script, we set:

    who     src_dr                  deploy_dir
    ---     ------                  ----------
    user    \$DOTCP_DOTFILES/user    \$HOME
    root    \$DOTCP_DOTFILES/root    /

To run as root, you may use something like
    sudo -E \$(which dotcp) ...
to drag \$DOTCP_DOTFILES along.

A backup of each target is made if necessary (with suffix '$bak_suffix'). To
find and delete old backup files, use something like

    find ~/ -maxdepth 5 -wholename "*$bak_suffix*" | xargs rm -rv

options
-------
-h : help
-s : simulate
-k : keep simulate files
-e : treat only files which already exist
-c : run reverse copy commands (target -> dotfiles repo)
-S : source base dir [default: \$DOTCP_DOTFILES or \$HOME/dotfiles]
-v : verbose, shows diffs
-V : more verbose
-p : use pager
-x : exclude regex
-i : include regex, use either -i or -x
-d : config files will be copied to <deploy_dir>/
    [default: \$HOME]
--sim-deploy-dir : temp dir for -s, default is auto-generated


examples
--------
Simulate (-s) what would be copied.
    $prog -s

Simulate and show diffs (-v).
    $prog -sv

The same, but view the diff in a pager (vim currently)
    $prog -spv

If you have updated target files and need to add the changes to the dotfiles
repo. Show commands to copy changed target files the dotfiles repo (i.e. the
reverse of installing them):
    $prog -sc

and actually execute them (remove simulate):
    $prog -c
EOF
}

here=$(dirname $(readlink -f $0))
. $here/tools/common.sh

_hsh(){
    sha1sum $1 | cut -f1 -d ' '
}


same_hash(){
    [ $(_hsh $1) = $(_hsh $2) ]
# not faster
##    diff -q $1 $2
}


with_pager(){
    $@ | vim -c 'set nomod syn=diff' -c 'map q :q<CR>' -
}


sim_cleanup(){
    if ! $keep_sim_deploy_dir; then
        [ -d $sim_deploy_dir ] && rm -rf $sim_deploy_dir
    fi
}


filetype(){
    stat -c %F $@
}


ft_file=$(filetype $here/tools/filetypes/dir/file)
ft_link=$(filetype $here/tools/filetypes/dir/link)
ft_dir=$(filetype $here/tools/filetypes/dir)


isfile(){
    [ -f $1 ] && [ "$(filetype $1)" = "$ft_file" ]
}


isdir(){
    [ -d $1 ] && [ "$(filetype $1)" = "$ft_dir" ]
}


islink(){
    [ -L $1 ] && [ "$(filetype $1)" = "$ft_link" ]
}


exists(){
    [ -e $1 ]
}


cmdline=$(getopt -o hcsS:kpevVd:x:i: -lsim-deploy-dir: -- "$@")
eval set -- "$cmdline"
while [ $# -gt 0 ]; do
    case "$1" in
        -s)
            simulate=true
            ;;
        --sim-deploy-dir)
            sim_deploy_dir=$2
            shift
            ;;
        -k)
            keep_sim_deploy_dir=true
            ;;
        -e)
            only_existing=true
            ;;
        -p)
            usepager=true
            ;;
        -S)
            src_dr_base=$2
            shift
            ;;
        -c)
            reverse_cp_commands=true
            ;;
        -v)
            verbose=1
            ;;
        -V)
            verbose=2
            ;;
        -d)
            deploy_dir=$2
            shift
            ;;
        -i)
            include=$2
            shift
            ;;
        -x)
            exclude=$2
            shift
            ;;
        -h)
            usage | less
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            err "cmdline error"
            ;;
    esac
    shift
done


main(){
    [ -n "$include" -a -n "$exclude" ] && err "use either -i or -x, not both"

    # mv -v, cp -v
    [ $verbose -ge 2 ] && vopt='-v' || vopt=
    cp_opts="-rd"

    # the non-root user is the owner of this script
    user=$(stat -c %U $0)
    if [ $(id -u) -eq 0 ]; then
        is_root=true
        echo "note: you are root: setting deploy_dir=/"
        deploy_dir='/'
        who="root"
    else
        who="user"
        is_root=false
    fi

    # dotfiles/config/{user,root}
    src_dr="$src_dr_base/$who"
    exists $src_dr || err "src_dr not found: $src_dr"

    echo "source directory: $src_dr"
    echo "target directory: $deploy_dir"
    isdir "$deploy_dir" || err "dir '$deploy_dir' doesn't exist"

    if $simulate; then
        if [ -z "$sim_deploy_dir" ]; then
            sim_deploy_dir=$(mktemp -d /tmp/dotcp_simulate_XXXXXXXX)
        fi
        echo "simulate: installing into $sim_deploy_dir"
    fi

    trap sim_cleanup EXIT STOP INT QUIT KILL ABRT TERM HUP

    echo "files/links to copy"

    # dotfiles/config/user/.foo/file
    # ^^^^^^^^^^^^^^^-------------------- $DOTCP_DOTFILES
    # ^^^^^^^^^^^^^^^^^^^^--------------- src_dr
    #                      ^^^^^^^^^----- install_path
    #
    # /home/user/.foo/file -------------- real_tgt
    # ^^^^^^^^^^------------------------- deploy_dir
    #            ^^^^^^^^^--------------- install_path
    #
    for src in $(find $src_dr -type f -o -type l -a ! -name "*.swp"); do

        # apply include / exclude pattern
        if [ -n "$exclude" ]; then
            if echo "$src" | grep -qE "$exclude"; then
                [ $verbose -ge 2 ] && echo "exclude: $src"
                continue
            fi
        elif [ -n "$include" ]; then
            if echo "$src" | grep -qE "$include"; then
                [ $verbose -ge 2 ] && echo "include: $src"
            else
                [ $verbose -ge 2 ] && echo "exclude: $src"
                continue
            fi
        fi

        install_path=$(echo $src | sed "s|$src_dr/||")
        real_tgt=$deploy_dir/$install_path

        # whether to treat existing targets only
        if $only_existing; then
            exists $real_tgt || continue
        fi

        # check if we need to update target, go on if needed
        tgt=$real_tgt
        if isfile "$src" && isfile "$tgt"; then
            same_hash $src $tgt && continue
        fi
        if islink "$src" && islink "$tgt"; then
            # compare link targets
            [ "$(readlink $src)" = "$(readlink $tgt)" ] && continue
        fi

        # simulate, determine $sim_tgt
        if $simulate; then
            sim_tgt=$sim_deploy_dir/$install_path
            if exists "$real_tgt"; then
                mkdir -p $(dirname $sim_tgt)
                cp $cp_opts $vopt $real_tgt $sim_tgt
            fi
            tgt=$sim_tgt
        fi

        # Commands for the reverse: tgt (file system) --> src (here)
        if $reverse_cp_commands; then
            copy_cmd="cp $cp_opts $real_tgt $src"
            $is_root && copy_cmd="sudo $copy_cmd; sudo chown $user:$user $src"
            if $reverse_cp_commands; then
                $simulate && echo "$copy_cmd" || eval "$copy_cmd -v"
            fi
        # Copy to target
        else
            echo "#new $(filetype $src): $real_tgt [$src]"
            if [ $verbose -ge 1 ] && isfile "$src"; then
                # Work around diff exit code. Need to use
                #   echo $(diff...)
                # to prevent dropping out here if we use
                #   set -e
                # globally.
                echo "$(diff -Naur $tgt $src)"
            fi
            # backup.sh -d : backup and delete, ensure clear dir when
            # copying new file
            # backup.sh -P : copy links as links
            if ! $simulate && exists "$tgt"; then
                $here/tools/backup.sh -dP -p $bak_suffix $tgt
            fi
            mkdir -p $vopt $(dirname $tgt)
            cp $cp_opts $vopt $src $tgt
            if $is_root; then
                chmod go+r $tgt
                chown root:root $tgt
            fi
        fi
    done
}

if $usepager; then
    with_pager main
else
    main
fi
