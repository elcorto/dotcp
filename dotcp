#!/bin/sh

set -eu

prog=$(basename $0)
simulate=false
verbose=0
deploy_dir=$HOME
usepager=false
src_dr_base=${DOTCP_DOTFILES:-$HOME/dotfiles}
sim_deploy_dir=
reverse_cp_commands=false
keep_sim_deploy_dir=false
only_existing=false
bak_suffix='.bak-dotcp-'
exclude=''
include=''
run_as_root=false


usage(){
    cat <<EOF
Usage
    $prog [options]

Options
    -h : help
    -s : simulate
    -k : keep simulate files
    -e : treat only files which already exist
    -c : run reverse copy commands (target -> dotfiles repo)
    -S : source base dir [default: \$DOTCP_DOTFILES or \$HOME/dotfiles]
    -v : verbose, shows diffs
    -V : more verbose
    -p : use pager
    -x : exclude regex
    -i : include regex, use either -i or -x
    -r : run as root (using sudo)
    -d : config files will be copied to <deploy_dir>/
        [default: \$HOME]
    --sim-deploy-dir : temp dir for -s, default is auto-generated
EOF
}

here=$(dirname $(readlink -f $0))
. $here/tools/common.sh

_hsh(){
    sha1sum $1 | cut -f1 -d ' '
}


same_hash(){
    [ $(_hsh $1) = $(_hsh $2) ]
# not faster
##    diff -q $1 $2
}


sim_cleanup(){
    if ! $keep_sim_deploy_dir; then
        [ -d $sim_deploy_dir ] && rm -rf $sim_deploy_dir
    fi
}

filetype(){
    stat -c %F $@
}


ft_file=$(filetype $here/tools/filetypes/dir/file)
ft_link=$(filetype $here/tools/filetypes/dir/link)
ft_dir=$(filetype $here/tools/filetypes/dir)


isfile(){
    [ -f $1 ] && [ "$(filetype $1)" = "$ft_file" ]
}


isdir(){
    [ -d $1 ] && [ "$(filetype $1)" = "$ft_dir" ]
}


islink(){
    [ -L $1 ] && [ "$(filetype $1)" = "$ft_link" ]
}


exists(){
    [ -e $1 ]
}


cmdline=$(getopt -o hcsS:kpevVd:x:i:r -lsim-deploy-dir: -- "$@")
eval set -- "$cmdline"
while [ $# -gt 0 ]; do
    case "$1" in
        -s)
            simulate=true
            ;;
        --sim-deploy-dir)
            sim_deploy_dir=$2
            shift
            ;;
        -k)
            keep_sim_deploy_dir=true
            ;;
        -e)
            only_existing=true
            ;;
        -p)
            usepager=true
            ;;
        -S)
            src_dr_base=$2
            shift
            ;;
        -c)
            reverse_cp_commands=true
            ;;
        -v)
            verbose=1
            ;;
        -V)
            verbose=2
            ;;
        -d)
            deploy_dir=$2
            shift
            ;;
        -i)
            include=$2
            shift
            ;;
        -x)
            exclude=$2
            shift
            ;;
        -r)
            run_as_root=true
            ;;
        -h)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            err "cmdline error"
            ;;
    esac
    shift
done


if $run_as_root; then
    # run as root:
    #   dotcp -r -s -i foo -pv
    # gets transformed by getopt to
    #   cmdline="-r -s -i 'foo' -p -v --"
    # We remove "-r" and the final "--" and call us again with sudo. Cool, eh?
    sudo -A --preserve-env=DOTCP_DOTFILES $(readlink -f $0) \
        $(echo "$cmdline" | sed -re 's/(.*) --/\1/; s/-r//')
    exit 0
fi


main(){
    [ -n "$include" -a -n "$exclude" ] && err "use either -i or -x, not both"

    # mv -v, cp -v
    [ $verbose -ge 2 ] && vopt='-v' || vopt=
    cp_opts="-rd"

    # the non-root user is the owner of this script
    user=$(stat -c %U $0)
    if [ $(id -u) -eq 0 ]; then
        is_root=true
        echo "note: you are root: setting deploy_dir=/"
        deploy_dir='/'
        who="root"
    else
        who="user"
        is_root=false
    fi

    # dotfiles/config/{user,root}
    src_dr="$src_dr_base/$who"
    exists $src_dr || err "src_dr not found: $src_dr"

    echo "source directory: $src_dr"
    echo "target directory: $deploy_dir"
    isdir "$deploy_dir" || err "dir '$deploy_dir' doesn't exist"

    if $simulate; then
        if [ -z "$sim_deploy_dir" ]; then
            [ -d /dev/shm ] && tmp_base=/dev/shm || tmp_base=/tmp
            sim_deploy_dir=$(mktemp -d ${tmp_base}/dotcp_simulate_XXXXXXXX)
        fi
        echo "simulate: installing into $sim_deploy_dir"
        trap sim_cleanup EXIT STOP INT QUIT KILL ABRT TERM HUP
    fi

    echo "files/links to copy"

    # dotfiles/config/user/.foo/file
    # ^^^^^^^^^^^^^^^-------------------- $DOTCP_DOTFILES
    # ^^^^^^^^^^^^^^^^^^^^--------------- src_dr
    #                      ^^^^^^^^^----- install_path
    #
    # /home/user/.foo/file -------------- real_tgt
    # ^^^^^^^^^^------------------------- deploy_dir
    #            ^^^^^^^^^--------------- install_path
    #
    for src in $(find $src_dr -type f -o -type l -a ! -name "*.swp"); do

        # apply include / exclude pattern
        if [ -n "$exclude" ]; then
            if echo "$src" | grep -qE "$exclude"; then
                [ $verbose -ge 2 ] && echo "exclude: $src"
                continue
            fi
        elif [ -n "$include" ]; then
            if echo "$src" | grep -qE "$include"; then
                [ $verbose -ge 2 ] && echo "include: $src"
            else
                [ $verbose -ge 2 ] && echo "exclude: $src"
                continue
            fi
        fi

        install_path=$(echo $src | sed "s|$src_dr/||")
        real_tgt=$deploy_dir/$install_path

        # whether to treat existing targets only
        if $only_existing; then
            exists $real_tgt || continue
        fi

        # check if we need to update target, go on if needed
        tgt=$real_tgt
        if isfile "$src" && isfile "$tgt"; then
            same_hash $src $tgt && continue
        fi
        if islink "$src" && islink "$tgt"; then
            # compare link targets
            [ "$(readlink $src)" = "$(readlink $tgt)" ] && continue
        fi

        # simulate, determine $sim_tgt
        if $simulate; then
            sim_tgt=$sim_deploy_dir/$install_path
            if exists "$real_tgt"; then
                mkdir -p $(dirname $sim_tgt)
                cp $cp_opts $vopt $real_tgt $sim_tgt
            fi
            tgt=$sim_tgt
        fi

        # Commands for the reverse: tgt (file system) --> src (here)
        if $reverse_cp_commands; then
            copy_cmd="cp $cp_opts $real_tgt $src"
            $is_root && copy_cmd="sudo $copy_cmd; sudo chown $user:$user $src"
            $simulate && echo "$copy_cmd" || eval "$copy_cmd -v"
        # Copy to target
        else
            echo "#new $(filetype $src): $real_tgt [$src]"
            if [ $verbose -ge 1 ] && isfile "$src"; then
                # Work around diff exit code. Need to use
                #   echo $(diff...)
                # to prevent dropping out here if we use
                #   set -e
                # globally.
                echo "$(diff -Naur $tgt $src)"
            fi
            # backup.sh -d : backup and delete, ensure clear dir when
            # copying new file
            # backup.sh -P : copy links as links
            if ! $simulate && exists "$tgt"; then
                $here/tools/backup.sh -dP -p $bak_suffix $tgt
            fi
            mkdir -p $vopt $(dirname $tgt)
            cp $cp_opts $vopt $src $tgt
            if $is_root; then
                chmod go+r $tgt
                chown root:root $tgt
            fi
        fi
    done
}


if $usepager; then
    main | vim -c 'set nomod syn=diff' -c 'map q :q<CR>' -
else
    main
fi
